// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/mesh.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on Mesh with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Mesh) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetMtls()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MeshValidationError{
					field:  "Mtls",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTracing()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return MeshValidationError{
					field:  "Tracing",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// MeshValidationError is the validation error returned by Mesh.Validate if the
// designated constraints aren't met.
type MeshValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeshValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeshValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeshValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeshValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeshValidationError) ErrorName() string { return "MeshValidationError" }

// Error satisfies the builtin error interface
func (e MeshValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMesh.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeshValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeshValidationError{}

// Validate checks the field values on CertificateAuthority with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CertificateAuthority) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *CertificateAuthority_Embedded_:

		{
			tmp := m.GetEmbedded()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return CertificateAuthorityValidationError{
						field:  "Embedded",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// CertificateAuthorityValidationError is the validation error returned by
// CertificateAuthority.Validate if the designated constraints aren't met.
type CertificateAuthorityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateAuthorityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateAuthorityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateAuthorityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateAuthorityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateAuthorityValidationError) ErrorName() string {
	return "CertificateAuthorityValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateAuthorityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateAuthority.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateAuthorityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateAuthorityValidationError{}

// Validate checks the field values on Tracing with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Tracing) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Type.(type) {

	case *Tracing_Zipkin_:

		{
			tmp := m.GetZipkin()

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return TracingValidationError{
						field:  "Zipkin",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// TracingValidationError is the validation error returned by Tracing.Validate
// if the designated constraints aren't met.
type TracingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TracingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TracingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TracingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TracingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TracingValidationError) ErrorName() string { return "TracingValidationError" }

// Error satisfies the builtin error interface
func (e TracingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TracingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TracingValidationError{}

// Validate checks the field values on Mesh_Mtls with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Mesh_Mtls) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetCa()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return Mesh_MtlsValidationError{
					field:  "Ca",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// Mesh_MtlsValidationError is the validation error returned by
// Mesh_Mtls.Validate if the designated constraints aren't met.
type Mesh_MtlsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Mesh_MtlsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Mesh_MtlsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Mesh_MtlsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Mesh_MtlsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Mesh_MtlsValidationError) ErrorName() string { return "Mesh_MtlsValidationError" }

// Error satisfies the builtin error interface
func (e Mesh_MtlsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMesh_Mtls.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Mesh_MtlsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Mesh_MtlsValidationError{}

// Validate checks the field values on CertificateAuthority_Embedded with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CertificateAuthority_Embedded) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CertificateAuthority_EmbeddedValidationError is the validation error
// returned by CertificateAuthority_Embedded.Validate if the designated
// constraints aren't met.
type CertificateAuthority_EmbeddedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CertificateAuthority_EmbeddedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CertificateAuthority_EmbeddedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CertificateAuthority_EmbeddedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CertificateAuthority_EmbeddedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CertificateAuthority_EmbeddedValidationError) ErrorName() string {
	return "CertificateAuthority_EmbeddedValidationError"
}

// Error satisfies the builtin error interface
func (e CertificateAuthority_EmbeddedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCertificateAuthority_Embedded.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CertificateAuthority_EmbeddedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CertificateAuthority_EmbeddedValidationError{}

// Validate checks the field values on Tracing_Zipkin with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Tracing_Zipkin) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Address

	return nil
}

// Tracing_ZipkinValidationError is the validation error returned by
// Tracing_Zipkin.Validate if the designated constraints aren't met.
type Tracing_ZipkinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Tracing_ZipkinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Tracing_ZipkinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Tracing_ZipkinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Tracing_ZipkinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Tracing_ZipkinValidationError) ErrorName() string { return "Tracing_ZipkinValidationError" }

// Error satisfies the builtin error interface
func (e Tracing_ZipkinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTracing_Zipkin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Tracing_ZipkinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Tracing_ZipkinValidationError{}
