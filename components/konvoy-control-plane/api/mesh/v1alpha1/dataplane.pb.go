// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mesh/v1alpha1/dataplane.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// DataplaneStatus defines the observed state of a Dataplane.
type DataplaneStatus struct {
	// List of ADS subscriptions created by a given Dataplane.
	Subscriptions        []*DiscoverySubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DataplaneStatus) Reset()         { *m = DataplaneStatus{} }
func (m *DataplaneStatus) String() string { return proto.CompactTextString(m) }
func (*DataplaneStatus) ProtoMessage()    {}
func (*DataplaneStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{0}
}
func (m *DataplaneStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneStatus.Merge(m, src)
}
func (m *DataplaneStatus) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneStatus proto.InternalMessageInfo

func (m *DataplaneStatus) GetSubscriptions() []*DiscoverySubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// DiscoverySubscription describes a single ADS subscription
// created by a Dataplane to the Control Plane.
// Ideally, there should be only one such subscription per Dataplane lifecycle.
// Presence of multiple subscriptions might indicate one of the following
// events:
// - transient loss of network connection between Dataplane and Control Plane
// - Dataplane restart (i.e. hot restart or crash)
// - Control Plane restart (i.e. rolling update or crash)
// - etc
type DiscoverySubscription struct {
	// Unique id per ADS subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Control Plane instance that handled given subscription.
	ControlPlaneInstanceId string `protobuf:"bytes,2,opt,name=control_plane_instance_id,json=controlPlaneInstanceId,proto3" json:"control_plane_instance_id,omitempty"`
	// Time when a given Dataplane connected to the Control Plane.
	ConnectTime *types.Timestamp `protobuf:"bytes,3,opt,name=connect_time,json=connectTime,proto3" json:"connect_time,omitempty"`
	// Time when a given Dataplane disconnected from the Control Plane.
	DisconnectTime *types.Timestamp `protobuf:"bytes,4,opt,name=disconnect_time,json=disconnectTime,proto3" json:"disconnect_time,omitempty"`
	// Time when the Control Plane updated subscription status most recently.
	LastStatusUpdateTime *types.Timestamp `protobuf:"bytes,5,opt,name=last_status_update_time,json=lastStatusUpdateTime,proto3" json:"last_status_update_time,omitempty"`
	// Status of the ADS subscription.
	Status               *DiscoverySubscriptionStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DiscoverySubscription) Reset()         { *m = DiscoverySubscription{} }
func (m *DiscoverySubscription) String() string { return proto.CompactTextString(m) }
func (*DiscoverySubscription) ProtoMessage()    {}
func (*DiscoverySubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{1}
}
func (m *DiscoverySubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverySubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverySubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverySubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverySubscription.Merge(m, src)
}
func (m *DiscoverySubscription) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverySubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverySubscription.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverySubscription proto.InternalMessageInfo

func (m *DiscoverySubscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoverySubscription) GetControlPlaneInstanceId() string {
	if m != nil {
		return m.ControlPlaneInstanceId
	}
	return ""
}

func (m *DiscoverySubscription) GetConnectTime() *types.Timestamp {
	if m != nil {
		return m.ConnectTime
	}
	return nil
}

func (m *DiscoverySubscription) GetDisconnectTime() *types.Timestamp {
	if m != nil {
		return m.DisconnectTime
	}
	return nil
}

func (m *DiscoverySubscription) GetLastStatusUpdateTime() *types.Timestamp {
	if m != nil {
		return m.LastStatusUpdateTime
	}
	return nil
}

func (m *DiscoverySubscription) GetStatus() *DiscoverySubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// DiscoverySubscriptionStatus defines status of an ADS subscription.
type DiscoverySubscriptionStatus struct {
	// Total number of xDS responses sent back to the Dataplane.
	TotalResponsesSent uint64 `protobuf:"varint,1,opt,name=total_responses_sent,json=totalResponsesSent,proto3" json:"total_responses_sent,omitempty"`
	// Total number of xDS responses ACKed by the Dataplane.
	TotalResponsesAcknowledged uint64 `protobuf:"varint,2,opt,name=total_responses_acknowledged,json=totalResponsesAcknowledged,proto3" json:"total_responses_acknowledged,omitempty"`
	// Total number of xDS responses NACKed by the Dataplane.
	TotalResponsesRejected   uint64   `protobuf:"varint,3,opt,name=total_responses_rejected,json=totalResponsesRejected,proto3" json:"total_responses_rejected,omitempty"`
	CdsResponsesSent         uint64   `protobuf:"varint,4,opt,name=cds_responses_sent,json=cdsResponsesSent,proto3" json:"cds_responses_sent,omitempty"`
	CdsResponsesAcknowledged uint64   `protobuf:"varint,5,opt,name=cds_responses_acknowledged,json=cdsResponsesAcknowledged,proto3" json:"cds_responses_acknowledged,omitempty"`
	CdsResponsesRejected     uint64   `protobuf:"varint,6,opt,name=cds_responses_rejected,json=cdsResponsesRejected,proto3" json:"cds_responses_rejected,omitempty"`
	EdsResponsesSent         uint64   `protobuf:"varint,7,opt,name=eds_responses_sent,json=edsResponsesSent,proto3" json:"eds_responses_sent,omitempty"`
	EdsResponsesAcknowledged uint64   `protobuf:"varint,8,opt,name=eds_responses_acknowledged,json=edsResponsesAcknowledged,proto3" json:"eds_responses_acknowledged,omitempty"`
	EdsResponsesRejected     uint64   `protobuf:"varint,9,opt,name=eds_responses_rejected,json=edsResponsesRejected,proto3" json:"eds_responses_rejected,omitempty"`
	LdsResponsesSent         uint64   `protobuf:"varint,10,opt,name=lds_responses_sent,json=ldsResponsesSent,proto3" json:"lds_responses_sent,omitempty"`
	LdsResponsesAcknowledged uint64   `protobuf:"varint,11,opt,name=lds_responses_acknowledged,json=ldsResponsesAcknowledged,proto3" json:"lds_responses_acknowledged,omitempty"`
	LdsResponsesRejected     uint64   `protobuf:"varint,12,opt,name=lds_responses_rejected,json=ldsResponsesRejected,proto3" json:"lds_responses_rejected,omitempty"`
	RdsResponsesSent         uint64   `protobuf:"varint,13,opt,name=rds_responses_sent,json=rdsResponsesSent,proto3" json:"rds_responses_sent,omitempty"`
	RdsResponsesAcknowledged uint64   `protobuf:"varint,14,opt,name=rds_responses_acknowledged,json=rdsResponsesAcknowledged,proto3" json:"rds_responses_acknowledged,omitempty"`
	RdsResponsesRejected     uint64   `protobuf:"varint,15,opt,name=rds_responses_rejected,json=rdsResponsesRejected,proto3" json:"rds_responses_rejected,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *DiscoverySubscriptionStatus) Reset()         { *m = DiscoverySubscriptionStatus{} }
func (m *DiscoverySubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*DiscoverySubscriptionStatus) ProtoMessage()    {}
func (*DiscoverySubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_7608682fd5ea84a4, []int{2}
}
func (m *DiscoverySubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverySubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverySubscriptionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverySubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverySubscriptionStatus.Merge(m, src)
}
func (m *DiscoverySubscriptionStatus) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverySubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverySubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverySubscriptionStatus proto.InternalMessageInfo

func (m *DiscoverySubscriptionStatus) GetTotalResponsesSent() uint64 {
	if m != nil {
		return m.TotalResponsesSent
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetTotalResponsesAcknowledged() uint64 {
	if m != nil {
		return m.TotalResponsesAcknowledged
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetTotalResponsesRejected() uint64 {
	if m != nil {
		return m.TotalResponsesRejected
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetCdsResponsesSent() uint64 {
	if m != nil {
		return m.CdsResponsesSent
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetCdsResponsesAcknowledged() uint64 {
	if m != nil {
		return m.CdsResponsesAcknowledged
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetCdsResponsesRejected() uint64 {
	if m != nil {
		return m.CdsResponsesRejected
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetEdsResponsesSent() uint64 {
	if m != nil {
		return m.EdsResponsesSent
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetEdsResponsesAcknowledged() uint64 {
	if m != nil {
		return m.EdsResponsesAcknowledged
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetEdsResponsesRejected() uint64 {
	if m != nil {
		return m.EdsResponsesRejected
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetLdsResponsesSent() uint64 {
	if m != nil {
		return m.LdsResponsesSent
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetLdsResponsesAcknowledged() uint64 {
	if m != nil {
		return m.LdsResponsesAcknowledged
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetLdsResponsesRejected() uint64 {
	if m != nil {
		return m.LdsResponsesRejected
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetRdsResponsesSent() uint64 {
	if m != nil {
		return m.RdsResponsesSent
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetRdsResponsesAcknowledged() uint64 {
	if m != nil {
		return m.RdsResponsesAcknowledged
	}
	return 0
}

func (m *DiscoverySubscriptionStatus) GetRdsResponsesRejected() uint64 {
	if m != nil {
		return m.RdsResponsesRejected
	}
	return 0
}

func init() {
	proto.RegisterType((*DataplaneStatus)(nil), "konvoy.mesh.v1alpha1.DataplaneStatus")
	proto.RegisterType((*DiscoverySubscription)(nil), "konvoy.mesh.v1alpha1.DiscoverySubscription")
	proto.RegisterType((*DiscoverySubscriptionStatus)(nil), "konvoy.mesh.v1alpha1.DiscoverySubscriptionStatus")
}

func init() { proto.RegisterFile("mesh/v1alpha1/dataplane.proto", fileDescriptor_7608682fd5ea84a4) }

var fileDescriptor_7608682fd5ea84a4 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd3, 0x4d, 0x8f, 0x12, 0x31,
	0x1c, 0x06, 0xf0, 0xcc, 0xc2, 0xe2, 0x6e, 0xd9, 0x05, 0xd3, 0x20, 0x8e, 0xa8, 0x48, 0x38, 0x91,
	0x68, 0x06, 0x59, 0x3d, 0x68, 0xa2, 0x89, 0x2f, 0x7b, 0xe1, 0xe6, 0x0e, 0x7a, 0xf1, 0x32, 0x29,
	0xed, 0x5f, 0x76, 0xdc, 0xd2, 0x4e, 0xda, 0x82, 0xd9, 0xbb, 0x1f, 0xce, 0xa3, 0x89, 0x5f, 0xc0,
	0xf0, 0x49, 0xcc, 0xb4, 0x8c, 0xce, 0xc0, 0xc0, 0xc6, 0xeb, 0xf6, 0x79, 0x9e, 0xfd, 0xd1, 0x66,
	0xd0, 0xc3, 0x39, 0xe8, 0xcb, 0xe1, 0x72, 0x44, 0x78, 0x72, 0x49, 0x46, 0x43, 0x46, 0x0c, 0x49,
	0x38, 0x11, 0x10, 0x24, 0x4a, 0x1a, 0x89, 0x5b, 0x57, 0x52, 0x2c, 0xe5, 0x75, 0x90, 0xa6, 0x82,
	0x2c, 0xd5, 0x79, 0x34, 0x93, 0x72, 0xc6, 0x61, 0x68, 0x33, 0xd3, 0xc5, 0x97, 0xa1, 0x89, 0xe7,
	0xa0, 0x0d, 0x99, 0x27, 0xae, 0xd6, 0x67, 0xa8, 0x79, 0x9e, 0x2d, 0x4d, 0x0c, 0x31, 0x0b, 0x8d,
	0x2f, 0xd0, 0xa9, 0x5e, 0x4c, 0x35, 0x55, 0x71, 0x62, 0x62, 0x29, 0xb4, 0xef, 0xf5, 0x2a, 0x83,
	0xfa, 0xd9, 0xe3, 0xa0, 0xec, 0x3f, 0x04, 0xe7, 0xb1, 0xa6, 0x72, 0x09, 0xea, 0x7a, 0x92, 0xeb,
	0x84, 0xc5, 0x85, 0xfe, 0xf7, 0x0a, 0xba, 0x53, 0x1a, 0xc4, 0x0d, 0x74, 0x10, 0x33, 0xdf, 0xeb,
	0x79, 0x83, 0xe3, 0xf0, 0x20, 0x66, 0xf8, 0x25, 0xba, 0x47, 0xa5, 0x30, 0x4a, 0xf2, 0xc8, 0x9a,
	0xa2, 0x58, 0x68, 0x43, 0x04, 0x85, 0x28, 0x66, 0xfe, 0x81, 0x8d, 0xb5, 0xd7, 0x81, 0x0f, 0xe9,
	0xf9, 0x78, 0x7d, 0x3c, 0x66, 0xf8, 0x35, 0x3a, 0xa1, 0x52, 0x08, 0xa0, 0x26, 0x4a, 0x7f, 0xa5,
	0x5f, 0xe9, 0x79, 0x83, 0xfa, 0x59, 0x27, 0x70, 0x57, 0x10, 0x64, 0x57, 0x10, 0x7c, 0xcc, 0xae,
	0x20, 0xac, 0xaf, 0xf3, 0xe9, 0x5f, 0xf0, 0x7b, 0xd4, 0x64, 0x29, 0x31, 0xb7, 0x50, 0xbd, 0x71,
	0xa1, 0xf1, 0xaf, 0x62, 0x47, 0x2e, 0xd0, 0x5d, 0x4e, 0xb4, 0x89, 0xb4, 0xbd, 0xca, 0x68, 0x91,
	0x30, 0x62, 0xc0, 0x8d, 0x1d, 0xde, 0x38, 0xd6, 0x4a, 0xab, 0xee, 0x11, 0x3e, 0xd9, 0xa2, 0x9d,
	0x1c, 0xa3, 0x9a, 0x5b, 0xf3, 0x6b, 0x76, 0x61, 0xf4, 0x1f, 0xef, 0xe0, 0xc6, 0xc2, 0xf5, 0x40,
	0xff, 0x57, 0x0d, 0xdd, 0xdf, 0x93, 0xc3, 0x4f, 0x51, 0xcb, 0x48, 0x43, 0x78, 0xa4, 0x40, 0x27,
	0x52, 0x68, 0xd0, 0x91, 0x06, 0x61, 0xec, 0xf3, 0x54, 0x43, 0x6c, 0xcf, 0xc2, 0xec, 0x68, 0x02,
	0xc2, 0xe0, 0x37, 0xe8, 0xc1, 0x66, 0x83, 0xd0, 0x2b, 0x21, 0xbf, 0x71, 0x60, 0x33, 0x70, 0x2f,
	0x56, 0x0d, 0x3b, 0xc5, 0xe6, 0xdb, 0x5c, 0x02, 0xbf, 0x40, 0xfe, 0xe6, 0x82, 0x82, 0xaf, 0x40,
	0x0d, 0x30, 0xfb, 0x82, 0xd5, 0xb0, 0x5d, 0x6c, 0x87, 0xeb, 0x53, 0xfc, 0x04, 0x61, 0xca, 0xf4,
	0xa6, 0xb5, 0x6a, 0x3b, 0xb7, 0x29, 0xd3, 0x45, 0xe9, 0x2b, 0xd4, 0x29, 0xa6, 0x0b, 0xce, 0x43,
	0xdb, 0xf2, 0xf3, 0xad, 0x82, 0xf2, 0x39, 0x6a, 0x17, 0xdb, 0x7f, 0x8d, 0x35, 0xdb, 0x6c, 0xe5,
	0x9b, 0x79, 0x21, 0x6c, 0x0b, 0x6f, 0x39, 0x21, 0x94, 0x08, 0x61, 0xb7, 0xf0, 0xc8, 0x09, 0x61,
	0x8f, 0x10, 0xca, 0x85, 0xc7, 0x4e, 0x08, 0x3b, 0x84, 0x7c, 0x5b, 0x88, 0x9c, 0x90, 0x97, 0x08,
	0xf9, 0x6e, 0x61, 0xdd, 0x09, 0xf9, 0x1e, 0x21, 0x2f, 0x17, 0x9e, 0x38, 0x21, 0xdf, 0x21, 0x54,
	0xdb, 0xc2, 0x53, 0x27, 0x54, 0x25, 0x42, 0xb5, 0x5b, 0xd8, 0x70, 0x42, 0xb5, 0x47, 0xa8, 0xca,
	0x85, 0x4d, 0x27, 0x54, 0x25, 0xc2, 0x77, 0xed, 0x1f, 0xab, 0xae, 0xf7, 0x73, 0xd5, 0xf5, 0x7e,
	0xaf, 0xba, 0xde, 0xe7, 0xa3, 0xec, 0x8b, 0x9c, 0xd6, 0xec, 0x27, 0xfe, 0xec, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc5, 0x17, 0xaa, 0x95, 0xb9, 0x05, 0x00, 0x00,
}

func (m *DataplaneStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDataplane(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscoverySubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverySubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ControlPlaneInstanceId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(len(m.ControlPlaneInstanceId)))
		i += copy(dAtA[i:], m.ControlPlaneInstanceId)
	}
	if m.ConnectTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.ConnectTime.Size()))
		n1, err := m.ConnectTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DisconnectTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.DisconnectTime.Size()))
		n2, err := m.DisconnectTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.LastStatusUpdateTime != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.LastStatusUpdateTime.Size()))
		n3, err := m.LastStatusUpdateTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Status != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.Status.Size()))
		n4, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscoverySubscriptionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverySubscriptionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalResponsesSent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.TotalResponsesSent))
	}
	if m.TotalResponsesAcknowledged != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.TotalResponsesAcknowledged))
	}
	if m.TotalResponsesRejected != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.TotalResponsesRejected))
	}
	if m.CdsResponsesSent != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.CdsResponsesSent))
	}
	if m.CdsResponsesAcknowledged != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.CdsResponsesAcknowledged))
	}
	if m.CdsResponsesRejected != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.CdsResponsesRejected))
	}
	if m.EdsResponsesSent != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.EdsResponsesSent))
	}
	if m.EdsResponsesAcknowledged != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.EdsResponsesAcknowledged))
	}
	if m.EdsResponsesRejected != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.EdsResponsesRejected))
	}
	if m.LdsResponsesSent != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.LdsResponsesSent))
	}
	if m.LdsResponsesAcknowledged != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.LdsResponsesAcknowledged))
	}
	if m.LdsResponsesRejected != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.LdsResponsesRejected))
	}
	if m.RdsResponsesSent != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.RdsResponsesSent))
	}
	if m.RdsResponsesAcknowledged != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.RdsResponsesAcknowledged))
	}
	if m.RdsResponsesRejected != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintDataplane(dAtA, i, uint64(m.RdsResponsesRejected))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDataplane(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DataplaneStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovDataplane(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverySubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataplane(uint64(l))
	}
	l = len(m.ControlPlaneInstanceId)
	if l > 0 {
		n += 1 + l + sovDataplane(uint64(l))
	}
	if m.ConnectTime != nil {
		l = m.ConnectTime.Size()
		n += 1 + l + sovDataplane(uint64(l))
	}
	if m.DisconnectTime != nil {
		l = m.DisconnectTime.Size()
		n += 1 + l + sovDataplane(uint64(l))
	}
	if m.LastStatusUpdateTime != nil {
		l = m.LastStatusUpdateTime.Size()
		n += 1 + l + sovDataplane(uint64(l))
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovDataplane(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverySubscriptionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalResponsesSent != 0 {
		n += 1 + sovDataplane(uint64(m.TotalResponsesSent))
	}
	if m.TotalResponsesAcknowledged != 0 {
		n += 1 + sovDataplane(uint64(m.TotalResponsesAcknowledged))
	}
	if m.TotalResponsesRejected != 0 {
		n += 1 + sovDataplane(uint64(m.TotalResponsesRejected))
	}
	if m.CdsResponsesSent != 0 {
		n += 1 + sovDataplane(uint64(m.CdsResponsesSent))
	}
	if m.CdsResponsesAcknowledged != 0 {
		n += 1 + sovDataplane(uint64(m.CdsResponsesAcknowledged))
	}
	if m.CdsResponsesRejected != 0 {
		n += 1 + sovDataplane(uint64(m.CdsResponsesRejected))
	}
	if m.EdsResponsesSent != 0 {
		n += 1 + sovDataplane(uint64(m.EdsResponsesSent))
	}
	if m.EdsResponsesAcknowledged != 0 {
		n += 1 + sovDataplane(uint64(m.EdsResponsesAcknowledged))
	}
	if m.EdsResponsesRejected != 0 {
		n += 1 + sovDataplane(uint64(m.EdsResponsesRejected))
	}
	if m.LdsResponsesSent != 0 {
		n += 1 + sovDataplane(uint64(m.LdsResponsesSent))
	}
	if m.LdsResponsesAcknowledged != 0 {
		n += 1 + sovDataplane(uint64(m.LdsResponsesAcknowledged))
	}
	if m.LdsResponsesRejected != 0 {
		n += 1 + sovDataplane(uint64(m.LdsResponsesRejected))
	}
	if m.RdsResponsesSent != 0 {
		n += 1 + sovDataplane(uint64(m.RdsResponsesSent))
	}
	if m.RdsResponsesAcknowledged != 0 {
		n += 1 + sovDataplane(uint64(m.RdsResponsesAcknowledged))
	}
	if m.RdsResponsesRejected != 0 {
		n += 1 + sovDataplane(uint64(m.RdsResponsesRejected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataplane(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDataplane(x uint64) (n int) {
	return sovDataplane(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataplaneStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &DiscoverySubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverySubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverySubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverySubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlaneInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlaneInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectTime == nil {
				m.ConnectTime = &types.Timestamp{}
			}
			if err := m.ConnectTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisconnectTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisconnectTime == nil {
				m.DisconnectTime = &types.Timestamp{}
			}
			if err := m.DisconnectTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastStatusUpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastStatusUpdateTime == nil {
				m.LastStatusUpdateTime = &types.Timestamp{}
			}
			if err := m.LastStatusUpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &DiscoverySubscriptionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverySubscriptionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverySubscriptionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverySubscriptionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResponsesSent", wireType)
			}
			m.TotalResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResponsesAcknowledged", wireType)
			}
			m.TotalResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalResponsesRejected", wireType)
			}
			m.TotalResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdsResponsesSent", wireType)
			}
			m.CdsResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdsResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdsResponsesAcknowledged", wireType)
			}
			m.CdsResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdsResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdsResponsesRejected", wireType)
			}
			m.CdsResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdsResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdsResponsesSent", wireType)
			}
			m.EdsResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdsResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdsResponsesAcknowledged", wireType)
			}
			m.EdsResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdsResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EdsResponsesRejected", wireType)
			}
			m.EdsResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EdsResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdsResponsesSent", wireType)
			}
			m.LdsResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LdsResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdsResponsesAcknowledged", wireType)
			}
			m.LdsResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LdsResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LdsResponsesRejected", wireType)
			}
			m.LdsResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LdsResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdsResponsesSent", wireType)
			}
			m.RdsResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdsResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdsResponsesAcknowledged", wireType)
			}
			m.RdsResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdsResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RdsResponsesRejected", wireType)
			}
			m.RdsResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RdsResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataplane(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataplane
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDataplane
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDataplane
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDataplane(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDataplane
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDataplane = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataplane   = fmt.Errorf("proto: integer overflow")
)
