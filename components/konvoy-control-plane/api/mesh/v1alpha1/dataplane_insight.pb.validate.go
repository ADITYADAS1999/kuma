// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mesh/v1alpha1/dataplane_insight.proto

package v1alpha1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// Validate checks the field values on DataplaneInsight with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DataplaneInsight) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetSubscriptions() {
		_, _ = idx, item

		{
			tmp := item

			if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

				if err := v.Validate(); err != nil {
					return DataplaneInsightValidationError{
						field:  fmt.Sprintf("Subscriptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}
		}

	}

	return nil
}

// DataplaneInsightValidationError is the validation error returned by
// DataplaneInsight.Validate if the designated constraints aren't met.
type DataplaneInsightValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataplaneInsightValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataplaneInsightValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataplaneInsightValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataplaneInsightValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataplaneInsightValidationError) ErrorName() string { return "DataplaneInsightValidationError" }

// Error satisfies the builtin error interface
func (e DataplaneInsightValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataplaneInsight.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataplaneInsightValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataplaneInsightValidationError{}

// Validate checks the field values on DiscoverySubscription with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoverySubscription) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetId()) < 1 {
		return DiscoverySubscriptionValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetControlPlaneInstanceId()) < 1 {
		return DiscoverySubscriptionValidationError{
			field:  "ControlPlaneInstanceId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetConnectTime() == nil {
		return DiscoverySubscriptionValidationError{
			field:  "ConnectTime",
			reason: "value is required",
		}
	}

	{
		tmp := m.GetDisconnectTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionValidationError{
					field:  "DisconnectTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetStatus()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// DiscoverySubscriptionValidationError is the validation error returned by
// DiscoverySubscription.Validate if the designated constraints aren't met.
type DiscoverySubscriptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverySubscriptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverySubscriptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverySubscriptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverySubscriptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverySubscriptionValidationError) ErrorName() string {
	return "DiscoverySubscriptionValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverySubscriptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverySubscription.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverySubscriptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverySubscriptionValidationError{}

// Validate checks the field values on DiscoverySubscriptionStatus with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoverySubscriptionStatus) Validate() error {
	if m == nil {
		return nil
	}

	{
		tmp := m.GetLastUpdateTime()

		if v, ok := interface{}(tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "LastUpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetTotal()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "Total",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetCds()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "Cds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetEds()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "Eds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetLds()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "Lds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	{
		tmp := m.GetRds()

		if v, ok := interface{}(&tmp).(interface{ Validate() error }); ok {

			if err := v.Validate(); err != nil {
				return DiscoverySubscriptionStatusValidationError{
					field:  "Rds",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}
	}

	return nil
}

// DiscoverySubscriptionStatusValidationError is the validation error returned
// by DiscoverySubscriptionStatus.Validate if the designated constraints
// aren't met.
type DiscoverySubscriptionStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoverySubscriptionStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoverySubscriptionStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoverySubscriptionStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoverySubscriptionStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoverySubscriptionStatusValidationError) ErrorName() string {
	return "DiscoverySubscriptionStatusValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoverySubscriptionStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoverySubscriptionStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoverySubscriptionStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoverySubscriptionStatusValidationError{}

// Validate checks the field values on DiscoveryServiceStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DiscoveryServiceStats) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResponsesSent

	// no validation rules for ResponsesAcknowledged

	// no validation rules for ResponsesRejected

	return nil
}

// DiscoveryServiceStatsValidationError is the validation error returned by
// DiscoveryServiceStats.Validate if the designated constraints aren't met.
type DiscoveryServiceStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryServiceStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryServiceStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryServiceStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryServiceStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryServiceStatsValidationError) ErrorName() string {
	return "DiscoveryServiceStatsValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryServiceStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryServiceStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryServiceStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryServiceStatsValidationError{}
