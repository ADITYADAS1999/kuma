// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/config/app/konvoyctl/v1alpha1/config.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Configuration defines configuration of `konvoyctl`.
type Configuration struct {
	// List of known Control Planes.
	ControlPlanes        []*ControlPlane `protobuf:"bytes,1,rep,name=control_planes,json=controlPlanes,proto3" json:"control_planes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_5794df17731045dd, []int{0}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetControlPlanes() []*ControlPlane {
	if m != nil {
		return m.ControlPlanes
	}
	return nil
}

// ControlPlane defines a Control Plane.
type ControlPlane struct {
	// Name defines an alias for a Control Plane.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Coordinates defines coordinates of a Control Plane.
	Coordinates          *ControlPlaneCoordinates `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ControlPlane) Reset()         { *m = ControlPlane{} }
func (m *ControlPlane) String() string { return proto.CompactTextString(m) }
func (*ControlPlane) ProtoMessage()    {}
func (*ControlPlane) Descriptor() ([]byte, []int) {
	return fileDescriptor_5794df17731045dd, []int{1}
}
func (m *ControlPlane) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlPlane) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlPlane.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlPlane) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPlane.Merge(m, src)
}
func (m *ControlPlane) XXX_Size() int {
	return m.Size()
}
func (m *ControlPlane) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPlane.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPlane proto.InternalMessageInfo

func (m *ControlPlane) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ControlPlane) GetCoordinates() *ControlPlaneCoordinates {
	if m != nil {
		return m.Coordinates
	}
	return nil
}

// ControlPlaneCoordinates defines coordinates of a Control Plane.
type ControlPlaneCoordinates struct {
	// Types that are valid to be assigned to Type:
	//	*ControlPlaneCoordinates_Kubernetes_
	//	*ControlPlaneCoordinates_ApiServer_
	Type                 isControlPlaneCoordinates_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ControlPlaneCoordinates) Reset()         { *m = ControlPlaneCoordinates{} }
func (m *ControlPlaneCoordinates) String() string { return proto.CompactTextString(m) }
func (*ControlPlaneCoordinates) ProtoMessage()    {}
func (*ControlPlaneCoordinates) Descriptor() ([]byte, []int) {
	return fileDescriptor_5794df17731045dd, []int{2}
}
func (m *ControlPlaneCoordinates) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlPlaneCoordinates) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlPlaneCoordinates.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlPlaneCoordinates) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPlaneCoordinates.Merge(m, src)
}
func (m *ControlPlaneCoordinates) XXX_Size() int {
	return m.Size()
}
func (m *ControlPlaneCoordinates) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPlaneCoordinates.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPlaneCoordinates proto.InternalMessageInfo

type isControlPlaneCoordinates_Type interface {
	isControlPlaneCoordinates_Type()
	MarshalTo([]byte) (int, error)
	Size() int
}

type ControlPlaneCoordinates_Kubernetes_ struct {
	Kubernetes *ControlPlaneCoordinates_Kubernetes `protobuf:"bytes,1,opt,name=kubernetes,proto3,oneof"`
}
type ControlPlaneCoordinates_ApiServer_ struct {
	ApiServer *ControlPlaneCoordinates_ApiServer `protobuf:"bytes,2,opt,name=api_server,json=apiServer,proto3,oneof"`
}

func (*ControlPlaneCoordinates_Kubernetes_) isControlPlaneCoordinates_Type() {}
func (*ControlPlaneCoordinates_ApiServer_) isControlPlaneCoordinates_Type()  {}

func (m *ControlPlaneCoordinates) GetType() isControlPlaneCoordinates_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ControlPlaneCoordinates) GetKubernetes() *ControlPlaneCoordinates_Kubernetes {
	if x, ok := m.GetType().(*ControlPlaneCoordinates_Kubernetes_); ok {
		return x.Kubernetes
	}
	return nil
}

func (m *ControlPlaneCoordinates) GetApiServer() *ControlPlaneCoordinates_ApiServer {
	if x, ok := m.GetType().(*ControlPlaneCoordinates_ApiServer_); ok {
		return x.ApiServer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ControlPlaneCoordinates) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ControlPlaneCoordinates_OneofMarshaler, _ControlPlaneCoordinates_OneofUnmarshaler, _ControlPlaneCoordinates_OneofSizer, []interface{}{
		(*ControlPlaneCoordinates_Kubernetes_)(nil),
		(*ControlPlaneCoordinates_ApiServer_)(nil),
	}
}

func _ControlPlaneCoordinates_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ControlPlaneCoordinates)
	// type
	switch x := m.Type.(type) {
	case *ControlPlaneCoordinates_Kubernetes_:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Kubernetes); err != nil {
			return err
		}
	case *ControlPlaneCoordinates_ApiServer_:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ApiServer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ControlPlaneCoordinates.Type has unexpected type %T", x)
	}
	return nil
}

func _ControlPlaneCoordinates_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ControlPlaneCoordinates)
	switch tag {
	case 1: // type.kubernetes
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ControlPlaneCoordinates_Kubernetes)
		err := b.DecodeMessage(msg)
		m.Type = &ControlPlaneCoordinates_Kubernetes_{msg}
		return true, err
	case 2: // type.api_server
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ControlPlaneCoordinates_ApiServer)
		err := b.DecodeMessage(msg)
		m.Type = &ControlPlaneCoordinates_ApiServer_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ControlPlaneCoordinates_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ControlPlaneCoordinates)
	// type
	switch x := m.Type.(type) {
	case *ControlPlaneCoordinates_Kubernetes_:
		s := proto.Size(x.Kubernetes)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ControlPlaneCoordinates_ApiServer_:
		s := proto.Size(x.ApiServer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Kubernetes defines coordinates of a Control Plane installed on Kubernetes.
type ControlPlaneCoordinates_Kubernetes struct {
	// Kubeconfig defines a path to a `kubectl` config file
	// that holds connectivity settings to a Kubernetes cluster
	// where Control Plane is installed to.
	Kubeconfig string `protobuf:"bytes,1,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	// Context defines a name of a context within `kubectl` config file
	// that holds connectivity settings to a Kubernetes cluster
	// where Control Plane is installed to.
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	// Namespace defines a namespace within a Kubernetes cluster
	// where Control Plane is installed to.
	Namespace            string   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlPlaneCoordinates_Kubernetes) Reset()         { *m = ControlPlaneCoordinates_Kubernetes{} }
func (m *ControlPlaneCoordinates_Kubernetes) String() string { return proto.CompactTextString(m) }
func (*ControlPlaneCoordinates_Kubernetes) ProtoMessage()    {}
func (*ControlPlaneCoordinates_Kubernetes) Descriptor() ([]byte, []int) {
	return fileDescriptor_5794df17731045dd, []int{2, 0}
}
func (m *ControlPlaneCoordinates_Kubernetes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlPlaneCoordinates_Kubernetes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlPlaneCoordinates_Kubernetes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlPlaneCoordinates_Kubernetes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPlaneCoordinates_Kubernetes.Merge(m, src)
}
func (m *ControlPlaneCoordinates_Kubernetes) XXX_Size() int {
	return m.Size()
}
func (m *ControlPlaneCoordinates_Kubernetes) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPlaneCoordinates_Kubernetes.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPlaneCoordinates_Kubernetes proto.InternalMessageInfo

func (m *ControlPlaneCoordinates_Kubernetes) GetKubeconfig() string {
	if m != nil {
		return m.Kubeconfig
	}
	return ""
}

func (m *ControlPlaneCoordinates_Kubernetes) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *ControlPlaneCoordinates_Kubernetes) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

// ApiServer defines coordinates of a Control Plane installed outside of
// Kubernetes.
type ControlPlaneCoordinates_ApiServer struct {
	// Address defines address of the Control Plane API server.
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ControlPlaneCoordinates_ApiServer) Reset()         { *m = ControlPlaneCoordinates_ApiServer{} }
func (m *ControlPlaneCoordinates_ApiServer) String() string { return proto.CompactTextString(m) }
func (*ControlPlaneCoordinates_ApiServer) ProtoMessage()    {}
func (*ControlPlaneCoordinates_ApiServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_5794df17731045dd, []int{2, 1}
}
func (m *ControlPlaneCoordinates_ApiServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlPlaneCoordinates_ApiServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlPlaneCoordinates_ApiServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlPlaneCoordinates_ApiServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlPlaneCoordinates_ApiServer.Merge(m, src)
}
func (m *ControlPlaneCoordinates_ApiServer) XXX_Size() int {
	return m.Size()
}
func (m *ControlPlaneCoordinates_ApiServer) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlPlaneCoordinates_ApiServer.DiscardUnknown(m)
}

var xxx_messageInfo_ControlPlaneCoordinates_ApiServer proto.InternalMessageInfo

func (m *ControlPlaneCoordinates_ApiServer) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Configuration)(nil), "konvoyctl.config.v1alpha1.Configuration")
	proto.RegisterType((*ControlPlane)(nil), "konvoyctl.config.v1alpha1.ControlPlane")
	proto.RegisterType((*ControlPlaneCoordinates)(nil), "konvoyctl.config.v1alpha1.ControlPlaneCoordinates")
	proto.RegisterType((*ControlPlaneCoordinates_Kubernetes)(nil), "konvoyctl.config.v1alpha1.ControlPlaneCoordinates.Kubernetes")
	proto.RegisterType((*ControlPlaneCoordinates_ApiServer)(nil), "konvoyctl.config.v1alpha1.ControlPlaneCoordinates.ApiServer")
}

func init() {
	proto.RegisterFile("pkg/config/app/konvoyctl/v1alpha1/config.proto", fileDescriptor_5794df17731045dd)
}

var fileDescriptor_5794df17731045dd = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xc1, 0x4e, 0xc2, 0x40,
	0x14, 0x64, 0x81, 0xa0, 0x7d, 0x88, 0x87, 0x3d, 0x68, 0x25, 0xa6, 0x21, 0x24, 0x46, 0x4e, 0x6d,
	0xc0, 0xab, 0x1e, 0x84, 0x0b, 0x89, 0x89, 0x31, 0xd5, 0x93, 0x89, 0x69, 0x96, 0xed, 0x8a, 0x0d,
	0x75, 0x77, 0xb3, 0xbb, 0x10, 0xf8, 0x43, 0x8f, 0x7e, 0x82, 0xe1, 0x03, 0xfc, 0x06, 0xd3, 0xa5,
	0x85, 0x5e, 0x48, 0xd4, 0x5b, 0x67, 0xde, 0xbc, 0x99, 0x4e, 0x5f, 0xc1, 0x97, 0xb3, 0x69, 0x40,
	0x05, 0x7f, 0x4d, 0xa6, 0x01, 0x91, 0x32, 0x98, 0x09, 0xbe, 0x10, 0x2b, 0x6a, 0xd2, 0x60, 0xd1,
	0x27, 0xa9, 0x7c, 0x23, 0xfd, 0x7c, 0xea, 0x4b, 0x25, 0x8c, 0xc0, 0x67, 0x5b, 0x81, 0x9f, 0xf3,
	0x85, 0xae, 0x1b, 0x41, 0x6b, 0x64, 0xa9, 0xb9, 0x22, 0x26, 0x11, 0x1c, 0xdf, 0xc3, 0x31, 0x15,
	0xdc, 0x28, 0x91, 0x46, 0x32, 0x25, 0x9c, 0x69, 0x17, 0x75, 0x6a, 0xbd, 0xe6, 0xe0, 0xd2, 0xdf,
	0x6b, 0xe2, 0x8f, 0x36, 0x0b, 0x0f, 0x99, 0x3e, 0x6c, 0xd1, 0x12, 0xd2, 0xdd, 0x25, 0x1c, 0x95,
	0xc7, 0x18, 0x43, 0x9d, 0x93, 0x77, 0xe6, 0xa2, 0x0e, 0xea, 0x39, 0xa1, 0x7d, 0xc6, 0x4f, 0xd0,
	0xa4, 0x42, 0xa8, 0x38, 0xe1, 0xc4, 0x30, 0xed, 0x56, 0x3b, 0xa8, 0xd7, 0x1c, 0x0c, 0x7e, 0x19,
	0x38, 0xda, 0x6d, 0x86, 0x65, 0x9b, 0xee, 0x77, 0x15, 0x4e, 0xf7, 0x08, 0x71, 0x04, 0x30, 0x9b,
	0x4f, 0x98, 0xe2, 0xcc, 0xd8, 0x86, 0x59, 0xe0, 0xcd, 0xdf, 0x03, 0xfd, 0xbb, 0xad, 0xc9, 0xb8,
	0x12, 0x96, 0x2c, 0xf1, 0x0b, 0x00, 0x91, 0x49, 0xa4, 0x99, 0x5a, 0x30, 0x95, 0x37, 0xba, 0xfe,
	0x47, 0xc0, 0xad, 0x4c, 0x1e, 0xad, 0xc7, 0xb8, 0x12, 0x3a, 0xa4, 0x00, 0xed, 0x18, 0x60, 0x17,
	0x8d, 0xbd, 0x4d, 0x9b, 0x8d, 0x67, 0xfe, 0x65, 0x4b, 0x0c, 0x76, 0xe1, 0x20, 0x3b, 0x0a, 0x5b,
	0x1a, 0xfb, 0x26, 0x4e, 0x58, 0x40, 0x7c, 0x0e, 0x4e, 0x76, 0x01, 0x2d, 0x09, 0x65, 0x6e, 0xcd,
	0xce, 0x76, 0x44, 0xfb, 0x02, 0x9c, 0x6d, 0x7e, 0x66, 0x42, 0xe2, 0x58, 0x31, 0xad, 0xf3, 0x84,
	0x02, 0x0e, 0x1b, 0x50, 0x37, 0x2b, 0xc9, 0x86, 0x27, 0x1f, 0x6b, 0x0f, 0x7d, 0xae, 0x3d, 0xf4,
	0xb5, 0xf6, 0xd0, 0xf3, 0x61, 0xd1, 0x6d, 0xd2, 0xb0, 0x7f, 0xe1, 0xd5, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x9a, 0xea, 0x3f, 0xad, 0xb7, 0x02, 0x00, 0x00,
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ControlPlanes) > 0 {
		for _, msg := range m.ControlPlanes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintConfig(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ControlPlane) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlane) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Coordinates != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Coordinates.Size()))
		n1, err := m.Coordinates.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ControlPlaneCoordinates) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlaneCoordinates) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		nn2, err := m.Type.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ControlPlaneCoordinates_Kubernetes_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Kubernetes != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.Kubernetes.Size()))
		n3, err := m.Kubernetes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *ControlPlaneCoordinates_ApiServer_) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.ApiServer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(m.ApiServer.Size()))
		n4, err := m.ApiServer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *ControlPlaneCoordinates_Kubernetes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlaneCoordinates_Kubernetes) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kubeconfig) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Kubeconfig)))
		i += copy(dAtA[i:], m.Kubeconfig)
	}
	if len(m.Context) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Context)))
		i += copy(dAtA[i:], m.Context)
	}
	if len(m.Namespace) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Namespace)))
		i += copy(dAtA[i:], m.Namespace)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ControlPlaneCoordinates_ApiServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlPlaneCoordinates_ApiServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ControlPlanes) > 0 {
		for _, e := range m.ControlPlanes {
			l = e.Size()
			n += 1 + l + sovConfig(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlPlane) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Coordinates != nil {
		l = m.Coordinates.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlPlaneCoordinates) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != nil {
		n += m.Type.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlPlaneCoordinates_Kubernetes_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kubernetes != nil {
		l = m.Kubernetes.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *ControlPlaneCoordinates_ApiServer_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ApiServer != nil {
		l = m.ApiServer.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	return n
}
func (m *ControlPlaneCoordinates_Kubernetes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kubeconfig)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ControlPlaneCoordinates_ApiServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlanes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlanes = append(m.ControlPlanes, &ControlPlane{})
			if err := m.ControlPlanes[len(m.ControlPlanes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlane) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlane: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlane: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinates == nil {
				m.Coordinates = &ControlPlaneCoordinates{}
			}
			if err := m.Coordinates.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlaneCoordinates) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlPlaneCoordinates: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlPlaneCoordinates: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubernetes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ControlPlaneCoordinates_Kubernetes{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ControlPlaneCoordinates_Kubernetes_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ControlPlaneCoordinates_ApiServer{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Type = &ControlPlaneCoordinates_ApiServer_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlaneCoordinates_Kubernetes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Kubernetes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Kubernetes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kubeconfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kubeconfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlPlaneCoordinates_ApiServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ApiServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ApiServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthConfig
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowConfig
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipConfig(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthConfig
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthConfig = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig   = fmt.Errorf("proto: integer overflow")
)
