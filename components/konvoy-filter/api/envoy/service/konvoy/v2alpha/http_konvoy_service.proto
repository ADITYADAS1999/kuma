syntax = "proto3";

package envoy.service.konvoy.v2alpha;

option go_package = "v2alpha";

option java_multiple_files = true;
option java_generic_services = true;
option java_outer_classname = "HttpKonvoyProto";
option java_package = "io.envoyproxy.envoy.service.konvoy.v2alpha";

import "api/envoy/service/konvoy/v2alpha/common.proto";

import "envoy/api/v2/core/base.proto";

// [#protodoc-title: "HTTP Konvoy" Service]

// [#proto-status: experimental]
// A generic interface for piping HTTP requests through a side car process.
service HttpKonvoy {
    // Proxies HTTP request.
    rpc ProxyHttpRequest (stream ProxyHttpRequestClientMessage) returns (stream ProxyHttpRequestServerMessage);
}

// Message sent by Konvoy HTTP filter to "HTTP Konvoy" Service
// as part of proxying a single HTTP request,
// i.e. HTTP Request Headers, HTTP Request Body Chunk, HTTP Request Trailers.
message ProxyHttpRequestClientMessage {
    oneof message {
        // Configuration for HTTP proxying.
        KonvoyServiceConfiguration configuration = 4;

        // HTTP request headers.
        HttpRequestHeaders request_headers = 1;

        // HTTP request body chunk.
        HttpRequestBodyChunk request_body_chunk = 2;

        // HTTP request trailers.
        HttpRequestTrailers request_trailers = 3;
    }
}

// HTTP request headers.
message HttpRequestHeaders {
    // Request headers.
    api.v2.core.HeaderMap headers = 1;
}

// HTTP request body chunk.
message HttpRequestBodyChunk {
    // Request body bytes.
    bytes bytes = 1;
}

// HTTP request trailers.
message HttpRequestTrailers {
    // Request trailers.
    api.v2.core.HeaderMap trailers = 1;
}

// Message sent by "HTTP Konvoy" Service back to Konvoy HTTP filter
// as part of proxying a single HTTP request.
// If a "HTTP Konvoy" Service wants Envoy to continue further request processing,
// it should send back a modified version of the original request,
// including modified request Headers, Body Chunk, Trailers.
// Alternatively, if a "HTTP Konvoy" Service wants Envoy to terminate
// further request processing,
// it should back response data for immediate reply to the downstream,
// including response Headers, Body Chunk, Trailers.
message ProxyHttpRequestServerMessage {
    oneof message {
        // Modified HTTP request headers for further processing.
        HttpRequestHeaders request_headers = 1;

        // Modified HTTP request body chunk for further processing.
        HttpRequestBodyChunk request_body_chunk = 2;

        // Modified HTTP request trailers for further processing.
        HttpRequestTrailers request_trailers = 3;

        // Direct HTTP response headers to downstream.
        HttpResponseHeaders response_headers = 4;

        // Direct HTTP response body chunk to downstream.
        HttpResponseBodyChunk response_body_chunk = 5;

        // Direct HTTP response trailers to downstream.
        HttpResponseTrailers response_trailers = 6;
    }
}

// HTTP response headers.
message HttpResponseHeaders {
    // Response headers.
    api.v2.core.HeaderMap headers = 1;
}

// HTTP response body chunk.
message HttpResponseBodyChunk {
    // Response body bytes.
    bytes bytes = 1;
}

// HTTP response trailers.
message HttpResponseTrailers {
    // Response trailers.
    api.v2.core.HeaderMap trailers = 1;
}
