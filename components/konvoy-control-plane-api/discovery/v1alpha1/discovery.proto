syntax = "proto3";

package konvoy.discovery.v1alpha1;

option go_package = "v1alpha1";

// List of Services and non-service Workloads that should be included into a
// mesh.
//
// Service is a logical network service provided collectively by multiple
// application instances.
//
// Workload is an arbitrary application instance that can either be a part of a
// Service or not. E.g., batch jobs, cron jobs, stream processing pipelines are
// all examples of workloads that, generally, are not a part of a Service but
// still need to be included into a mesh (where they act purely as clients).
message Inventory {

    message Item {
        oneof item_type {

            Service service = 1;

            Workload workload = 2;
        }
    }

    // List of Services and non-service Workloads.
    repeated Item items = 1;
}

// Logical network service provided collectively by multiple application
// instances.
message Service {

    // Id of a service within a mesh.
    //
    // Even if the original service registry doesn't have a notion of namespaces
    // (compartments), within a mesh every service belongs to a namespace.
    // When the namespace is omitted the implicit default namespace will be
    // assumed.
    Id id = 1;

    // List of endpoints providing this service.
    repeated Endpoint endpoints = 4;
}

// Endpoint describes a destination for network traffic in a mesh.
message Endpoint {

    // Workload that will receive traffic.
    Workload workload = 1;

    // Address on which the workload is listening for traffic.
    string address = 2;

    // Port on which the workload is listening for traffic.
    uint32 port = 3;
}

// Workload describes an application instance that can be either a source of
// network traffic, or a destination for it or both.
message Workload {

    // Id of a workload within a mesh.
    //
    // Even if the original service registry doesn't have a notion of namespaces
    // (compartments), within a mesh every workload belongs to a namespace.
    // When the namespace is omitted the implicit default namespace will be
    // assumed.
    Id id = 1;

    // Additional information about a workload that powers traffic policies
    // (i.e. access control rules), subset load balancing (i.e. canary
    // releases), zone aware routing  (i.e. multi-datacenter routing), etc.
    // In practice, each workload should have at least one label for grouping
    // by application it represents, i.e. `app=gmail` or `job=daily-report`.
    // To enable canary releases, grouping by version might be useful, i.e.
    // `version=1.2.3`.
    // Usage of such labels allows to define traffic policies in terms of
    // applications, their versions and other traits.
    Meta meta = 2;
}

// Id of an entity within a mesh.
//
// Although a service registry you're integrating with might not have a notion
// of namespaces (compartments), you can still benefit from them in the context
// of a mesh.
// By assigning an entity to a namespace you can leverage of namespace-wide
// defaults, namespace-wide policies, etc.
message Id {

    // Namespace is a unit of compartmentalization.
    //
    // If the namespace is omitted the implicit default namespace will be
    // assumed.
    string namespace = 1;

    // Name must be unique within a namespace.
    string name = 2;
}

// Meta information for breaking objects into categories.
message Meta {

    // Key/value pairs for breaking objects into categories, e.g.
    // Kubernetes labels.
    map<string, string> labels = 1;
}
