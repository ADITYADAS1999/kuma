// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mesh/v1alpha1/dataplane_insight.proto

package v1alpha1

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// DataplaneInsight defines the observed state of a Dataplane.
type DataplaneInsight struct {
	// List of ADS subscriptions created by a given Dataplane.
	Subscriptions        []*DiscoverySubscription `protobuf:"bytes,1,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DataplaneInsight) Reset()         { *m = DataplaneInsight{} }
func (m *DataplaneInsight) String() string { return proto.CompactTextString(m) }
func (*DataplaneInsight) ProtoMessage()    {}
func (*DataplaneInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_35794f05b529b342, []int{0}
}
func (m *DataplaneInsight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneInsight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneInsight.Merge(m, src)
}
func (m *DataplaneInsight) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneInsight.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneInsight proto.InternalMessageInfo

func (m *DataplaneInsight) GetSubscriptions() []*DiscoverySubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// DiscoverySubscription describes a single ADS subscription
// created by a Dataplane to the Control Plane.
// Ideally, there should be only one such subscription per Dataplane lifecycle.
// Presence of multiple subscriptions might indicate one of the following
// events:
// - transient loss of network connection between Dataplane and Control Plane
// - Dataplane restart (i.e. hot restart or crash)
// - Control Plane restart (i.e. rolling update or crash)
// - etc
type DiscoverySubscription struct {
	// Unique id per ADS subscription.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Control Plane instance that handled given subscription.
	ControlPlaneInstanceId string `protobuf:"bytes,2,opt,name=control_plane_instance_id,json=controlPlaneInstanceId,proto3" json:"control_plane_instance_id,omitempty"`
	// Time when a given Dataplane connected to the Control Plane.
	ConnectTime *types.Timestamp `protobuf:"bytes,3,opt,name=connect_time,json=connectTime,proto3" json:"connect_time,omitempty"`
	// Time when a given Dataplane disconnected from the Control Plane.
	DisconnectTime *types.Timestamp `protobuf:"bytes,4,opt,name=disconnect_time,json=disconnectTime,proto3" json:"disconnect_time,omitempty"`
	// Status of the ADS subscription.
	Status               DiscoverySubscriptionStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *DiscoverySubscription) Reset()         { *m = DiscoverySubscription{} }
func (m *DiscoverySubscription) String() string { return proto.CompactTextString(m) }
func (*DiscoverySubscription) ProtoMessage()    {}
func (*DiscoverySubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_35794f05b529b342, []int{1}
}
func (m *DiscoverySubscription) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverySubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverySubscription.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverySubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverySubscription.Merge(m, src)
}
func (m *DiscoverySubscription) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverySubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverySubscription.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverySubscription proto.InternalMessageInfo

func (m *DiscoverySubscription) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DiscoverySubscription) GetControlPlaneInstanceId() string {
	if m != nil {
		return m.ControlPlaneInstanceId
	}
	return ""
}

func (m *DiscoverySubscription) GetConnectTime() *types.Timestamp {
	if m != nil {
		return m.ConnectTime
	}
	return nil
}

func (m *DiscoverySubscription) GetDisconnectTime() *types.Timestamp {
	if m != nil {
		return m.DisconnectTime
	}
	return nil
}

func (m *DiscoverySubscription) GetStatus() DiscoverySubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return DiscoverySubscriptionStatus{}
}

// DiscoverySubscriptionStatus defines status of an ADS subscription.
type DiscoverySubscriptionStatus struct {
	// Time when status of a given ADS subscription was most recently updated.
	LastUpdateTime *types.Timestamp `protobuf:"bytes,1,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	// Total defines an aggregate over individual xDS stats.
	Total DiscoveryServiceStats `protobuf:"bytes,2,opt,name=total,proto3" json:"total"`
	// CDS defines all CDS stats.
	Cds DiscoveryServiceStats `protobuf:"bytes,3,opt,name=cds,proto3" json:"cds"`
	// EDS defines all EDS stats.
	Eds DiscoveryServiceStats `protobuf:"bytes,4,opt,name=eds,proto3" json:"eds"`
	// LDS defines all LDS stats.
	Lds DiscoveryServiceStats `protobuf:"bytes,5,opt,name=lds,proto3" json:"lds"`
	// RDS defines all RDS stats.
	Rds                  DiscoveryServiceStats `protobuf:"bytes,6,opt,name=rds,proto3" json:"rds"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DiscoverySubscriptionStatus) Reset()         { *m = DiscoverySubscriptionStatus{} }
func (m *DiscoverySubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*DiscoverySubscriptionStatus) ProtoMessage()    {}
func (*DiscoverySubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_35794f05b529b342, []int{2}
}
func (m *DiscoverySubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoverySubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoverySubscriptionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoverySubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoverySubscriptionStatus.Merge(m, src)
}
func (m *DiscoverySubscriptionStatus) XXX_Size() int {
	return m.Size()
}
func (m *DiscoverySubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoverySubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoverySubscriptionStatus proto.InternalMessageInfo

func (m *DiscoverySubscriptionStatus) GetLastUpdateTime() *types.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *DiscoverySubscriptionStatus) GetTotal() DiscoveryServiceStats {
	if m != nil {
		return m.Total
	}
	return DiscoveryServiceStats{}
}

func (m *DiscoverySubscriptionStatus) GetCds() DiscoveryServiceStats {
	if m != nil {
		return m.Cds
	}
	return DiscoveryServiceStats{}
}

func (m *DiscoverySubscriptionStatus) GetEds() DiscoveryServiceStats {
	if m != nil {
		return m.Eds
	}
	return DiscoveryServiceStats{}
}

func (m *DiscoverySubscriptionStatus) GetLds() DiscoveryServiceStats {
	if m != nil {
		return m.Lds
	}
	return DiscoveryServiceStats{}
}

func (m *DiscoverySubscriptionStatus) GetRds() DiscoveryServiceStats {
	if m != nil {
		return m.Rds
	}
	return DiscoveryServiceStats{}
}

// DiscoveryServiceStats defines all stats over a single xDS service.
type DiscoveryServiceStats struct {
	// Number of xDS responses sent to the Dataplane.
	ResponsesSent uint64 `protobuf:"varint,1,opt,name=responses_sent,json=responsesSent,proto3" json:"responses_sent,omitempty"`
	// Number of xDS responses ACKed by the Dataplane.
	ResponsesAcknowledged uint64 `protobuf:"varint,2,opt,name=responses_acknowledged,json=responsesAcknowledged,proto3" json:"responses_acknowledged,omitempty"`
	// Number of xDS responses NACKed by the Dataplane.
	ResponsesRejected    uint64   `protobuf:"varint,3,opt,name=responses_rejected,json=responsesRejected,proto3" json:"responses_rejected,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscoveryServiceStats) Reset()         { *m = DiscoveryServiceStats{} }
func (m *DiscoveryServiceStats) String() string { return proto.CompactTextString(m) }
func (*DiscoveryServiceStats) ProtoMessage()    {}
func (*DiscoveryServiceStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_35794f05b529b342, []int{3}
}
func (m *DiscoveryServiceStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DiscoveryServiceStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DiscoveryServiceStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DiscoveryServiceStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscoveryServiceStats.Merge(m, src)
}
func (m *DiscoveryServiceStats) XXX_Size() int {
	return m.Size()
}
func (m *DiscoveryServiceStats) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscoveryServiceStats.DiscardUnknown(m)
}

var xxx_messageInfo_DiscoveryServiceStats proto.InternalMessageInfo

func (m *DiscoveryServiceStats) GetResponsesSent() uint64 {
	if m != nil {
		return m.ResponsesSent
	}
	return 0
}

func (m *DiscoveryServiceStats) GetResponsesAcknowledged() uint64 {
	if m != nil {
		return m.ResponsesAcknowledged
	}
	return 0
}

func (m *DiscoveryServiceStats) GetResponsesRejected() uint64 {
	if m != nil {
		return m.ResponsesRejected
	}
	return 0
}

func init() {
	proto.RegisterType((*DataplaneInsight)(nil), "kuma.mesh.v1alpha1.DataplaneInsight")
	proto.RegisterType((*DiscoverySubscription)(nil), "kuma.mesh.v1alpha1.DiscoverySubscription")
	proto.RegisterType((*DiscoverySubscriptionStatus)(nil), "kuma.mesh.v1alpha1.DiscoverySubscriptionStatus")
	proto.RegisterType((*DiscoveryServiceStats)(nil), "kuma.mesh.v1alpha1.DiscoveryServiceStats")
}

func init() {
	proto.RegisterFile("mesh/v1alpha1/dataplane_insight.proto", fileDescriptor_35794f05b529b342)
}

var fileDescriptor_35794f05b529b342 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x3f, 0x6f, 0x13, 0x31,
	0x18, 0xc6, 0xf1, 0xe5, 0x1a, 0xb5, 0x0e, 0x2d, 0xc1, 0xa2, 0xe5, 0x1a, 0xa4, 0x34, 0x8a, 0x54,
	0x29, 0x0c, 0xdc, 0xa9, 0x45, 0x7c, 0x80, 0x86, 0x30, 0x64, 0x40, 0xa0, 0x0b, 0x2c, 0x2c, 0x27,
	0xe7, 0xfc, 0x72, 0x31, 0xbd, 0xd8, 0xa7, 0xb3, 0x13, 0xc4, 0xf7, 0x61, 0x60, 0x66, 0x60, 0x60,
	0x62, 0xec, 0xc8, 0xc6, 0x86, 0x50, 0x36, 0xbe, 0x05, 0xb2, 0xef, 0x2e, 0x09, 0x7f, 0x44, 0x08,
	0x9b, 0xe5, 0xf7, 0xf9, 0x3d, 0x7e, 0xfd, 0xbc, 0x36, 0x3e, 0x9d, 0x82, 0x9a, 0x04, 0xf3, 0x33,
	0x9a, 0x66, 0x13, 0x7a, 0x16, 0x30, 0xaa, 0x69, 0x96, 0x52, 0x01, 0x11, 0x17, 0x8a, 0x27, 0x13,
	0xed, 0x67, 0xb9, 0xd4, 0x92, 0x90, 0xcb, 0xd9, 0x94, 0xfa, 0x46, 0xeb, 0x57, 0xda, 0xd6, 0x49,
	0x22, 0x65, 0x92, 0x42, 0x60, 0x15, 0xe3, 0xd9, 0xcb, 0x40, 0xf3, 0x29, 0x28, 0x4d, 0xa7, 0x59,
	0x01, 0xb5, 0x6e, 0x25, 0x32, 0x91, 0x76, 0x19, 0x98, 0x55, 0xb9, 0x7b, 0x7b, 0x4e, 0x53, 0xce,
	0xa8, 0x86, 0xa0, 0x5a, 0x14, 0x85, 0x6e, 0x8c, 0x9b, 0x83, 0xea, 0xf8, 0x61, 0x71, 0x3a, 0x79,
	0x82, 0xf7, 0xd5, 0x6c, 0xac, 0xe2, 0x9c, 0x67, 0x9a, 0x4b, 0xa1, 0x3c, 0xd4, 0xa9, 0xf5, 0x1a,
	0xe7, 0x77, 0xfd, 0xdf, 0xfb, 0xf1, 0x07, 0x5c, 0xc5, 0x72, 0x0e, 0xf9, 0x9b, 0xd1, 0x1a, 0x11,
	0xfe, 0xcc, 0x77, 0xbf, 0x38, 0xf8, 0xf0, 0x8f, 0x42, 0x72, 0x8c, 0x1d, 0xce, 0x3c, 0xd4, 0x41,
	0xbd, 0xbd, 0xfe, 0xde, 0xc7, 0xef, 0x9f, 0x6a, 0x6e, 0xee, 0x34, 0x51, 0xe8, 0x70, 0x46, 0x06,
	0xf8, 0x38, 0x96, 0x42, 0xe7, 0x32, 0x8d, 0x96, 0xe1, 0x68, 0x2a, 0x62, 0x88, 0x38, 0xf3, 0x9c,
	0x5f, 0x89, 0xa3, 0x52, 0xfb, 0xb4, 0xbc, 0x88, 0x55, 0x0e, 0x19, 0x19, 0xe2, 0xeb, 0xb1, 0x14,
	0x02, 0x62, 0x1d, 0x99, 0xa4, 0xbc, 0x5a, 0x07, 0xf5, 0x1a, 0xe7, 0x2d, 0xbf, 0x88, 0xd1, 0xaf,
	0x62, 0xf4, 0x9f, 0x55, 0x31, 0xf6, 0xb1, 0x31, 0xdd, 0x79, 0x8f, 0x9c, 0x5d, 0x14, 0x36, 0x4a,
	0xd6, 0x54, 0xc9, 0x43, 0x7c, 0x83, 0x99, 0x4b, 0xac, 0xb9, 0xb9, 0x9b, 0xdc, 0xc2, 0x83, 0x15,
	0x62, 0x4d, 0x1e, 0xe3, 0xba, 0xd2, 0x54, 0xcf, 0x94, 0xb7, 0x63, 0xd9, 0xe0, 0x9f, 0x43, 0x1d,
	0x59, 0xac, 0xef, 0x5e, 0x7d, 0x3d, 0xb9, 0x16, 0x96, 0x26, 0xdd, 0x0f, 0x35, 0x7c, 0xe7, 0x2f,
	0x6a, 0x32, 0xc0, 0xcd, 0x94, 0x2a, 0x1d, 0xcd, 0x32, 0x33, 0xf3, 0xa2, 0x69, 0xb4, 0xb9, 0x69,
	0xc3, 0x3c, 0xb7, 0x88, 0x6d, 0xfa, 0x11, 0xde, 0xd1, 0x52, 0xd3, 0xd4, 0xc6, 0xbe, 0xf1, 0x21,
	0x40, 0x3e, 0xe7, 0x31, 0x98, 0x06, 0xaa, 0x6e, 0x0b, 0x9a, 0x5c, 0xe0, 0x5a, 0xcc, 0x54, 0x39,
	0x82, 0xad, 0x4d, 0x0c, 0x6b, 0x2c, 0x80, 0xa9, 0x32, 0xf7, 0xed, 0x2d, 0xa0, 0xb0, 0x48, 0x59,
	0x15, 0xff, 0xf6, 0x16, 0x69, 0x61, 0x91, 0x33, 0xe5, 0xd5, 0xff, 0xd3, 0x22, 0x67, 0xaa, 0xfb,
	0x16, 0xad, 0x7f, 0x89, 0x35, 0x11, 0x39, 0xc5, 0x07, 0x39, 0xa8, 0x4c, 0x0a, 0x05, 0x2a, 0x52,
	0x20, 0xb4, 0x1d, 0x98, 0x1b, 0xee, 0x2f, 0x77, 0x47, 0x20, 0x34, 0x79, 0x80, 0x8f, 0x56, 0x32,
	0x1a, 0x5f, 0x0a, 0xf9, 0x3a, 0x05, 0x96, 0x40, 0xf1, 0x37, 0xdc, 0xf0, 0x70, 0x59, 0xbd, 0x58,
	0x2b, 0x92, 0x7b, 0x98, 0xac, 0xb0, 0x1c, 0x5e, 0x41, 0xac, 0x81, 0xd9, 0x91, 0xb8, 0xe1, 0xcd,
	0x65, 0x25, 0x2c, 0x0b, 0xfd, 0xd6, 0xbb, 0x45, 0x1b, 0x5d, 0x2d, 0xda, 0xe8, 0xf3, 0xa2, 0x8d,
	0xbe, 0x2d, 0xda, 0xe8, 0xc5, 0x6e, 0x75, 0xc7, 0x71, 0xdd, 0xbe, 0x9c, 0xfb, 0x3f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x27, 0x93, 0x4b, 0x37, 0xce, 0x04, 0x00, 0x00,
}

func (this *DataplaneInsight) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataplaneInsight)
	if !ok {
		that2, ok := that.(DataplaneInsight)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Subscriptions) != len(that1.Subscriptions) {
		return false
	}
	for i := range this.Subscriptions {
		if !this.Subscriptions[i].Equal(that1.Subscriptions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DiscoverySubscription) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoverySubscription)
	if !ok {
		that2, ok := that.(DiscoverySubscription)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ControlPlaneInstanceId != that1.ControlPlaneInstanceId {
		return false
	}
	if !this.ConnectTime.Equal(that1.ConnectTime) {
		return false
	}
	if !this.DisconnectTime.Equal(that1.DisconnectTime) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DiscoverySubscriptionStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoverySubscriptionStatus)
	if !ok {
		that2, ok := that.(DiscoverySubscriptionStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LastUpdateTime.Equal(that1.LastUpdateTime) {
		return false
	}
	if !this.Total.Equal(&that1.Total) {
		return false
	}
	if !this.Cds.Equal(&that1.Cds) {
		return false
	}
	if !this.Eds.Equal(&that1.Eds) {
		return false
	}
	if !this.Lds.Equal(&that1.Lds) {
		return false
	}
	if !this.Rds.Equal(&that1.Rds) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DiscoveryServiceStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DiscoveryServiceStats)
	if !ok {
		that2, ok := that.(DiscoveryServiceStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ResponsesSent != that1.ResponsesSent {
		return false
	}
	if this.ResponsesAcknowledged != that1.ResponsesAcknowledged {
		return false
	}
	if this.ResponsesRejected != that1.ResponsesRejected {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *DataplaneInsight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneInsight) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintDataplaneInsight(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscoverySubscription) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverySubscription) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ControlPlaneInstanceId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(len(m.ControlPlaneInstanceId)))
		i += copy(dAtA[i:], m.ControlPlaneInstanceId)
	}
	if m.ConnectTime != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.ConnectTime.Size()))
		n1, err := m.ConnectTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DisconnectTime != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.DisconnectTime.Size()))
		n2, err := m.DisconnectTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Status.Size()))
	n3, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscoverySubscriptionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoverySubscriptionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastUpdateTime != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.LastUpdateTime.Size()))
		n4, err := m.LastUpdateTime.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Total.Size()))
	n5, err := m.Total.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	dAtA[i] = 0x1a
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Cds.Size()))
	n6, err := m.Cds.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x22
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Eds.Size()))
	n7, err := m.Eds.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	dAtA[i] = 0x2a
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Lds.Size()))
	n8, err := m.Lds.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x32
	i++
	i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.Rds.Size()))
	n9, err := m.Rds.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *DiscoveryServiceStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DiscoveryServiceStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ResponsesSent != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.ResponsesSent))
	}
	if m.ResponsesAcknowledged != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.ResponsesAcknowledged))
	}
	if m.ResponsesRejected != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintDataplaneInsight(dAtA, i, uint64(m.ResponsesRejected))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintDataplaneInsight(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DataplaneInsight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovDataplaneInsight(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverySubscription) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovDataplaneInsight(uint64(l))
	}
	l = len(m.ControlPlaneInstanceId)
	if l > 0 {
		n += 1 + l + sovDataplaneInsight(uint64(l))
	}
	if m.ConnectTime != nil {
		l = m.ConnectTime.Size()
		n += 1 + l + sovDataplaneInsight(uint64(l))
	}
	if m.DisconnectTime != nil {
		l = m.DisconnectTime.Size()
		n += 1 + l + sovDataplaneInsight(uint64(l))
	}
	l = m.Status.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoverySubscriptionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastUpdateTime != nil {
		l = m.LastUpdateTime.Size()
		n += 1 + l + sovDataplaneInsight(uint64(l))
	}
	l = m.Total.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	l = m.Cds.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	l = m.Eds.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	l = m.Lds.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	l = m.Rds.Size()
	n += 1 + l + sovDataplaneInsight(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DiscoveryServiceStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResponsesSent != 0 {
		n += 1 + sovDataplaneInsight(uint64(m.ResponsesSent))
	}
	if m.ResponsesAcknowledged != 0 {
		n += 1 + sovDataplaneInsight(uint64(m.ResponsesAcknowledged))
	}
	if m.ResponsesRejected != 0 {
		n += 1 + sovDataplaneInsight(uint64(m.ResponsesRejected))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataplaneInsight(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDataplaneInsight(x uint64) (n int) {
	return sovDataplaneInsight(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataplaneInsight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplaneInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneInsight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneInsight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &DiscoverySubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplaneInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverySubscription) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplaneInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverySubscription: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverySubscription: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlPlaneInstanceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ControlPlaneInstanceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnectTime == nil {
				m.ConnectTime = &types.Timestamp{}
			}
			if err := m.ConnectTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisconnectTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DisconnectTime == nil {
				m.DisconnectTime = &types.Timestamp{}
			}
			if err := m.DisconnectTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplaneInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoverySubscriptionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplaneInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoverySubscriptionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoverySubscriptionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastUpdateTime == nil {
				m.LastUpdateTime = &types.Timestamp{}
			}
			if err := m.LastUpdateTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Eds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Eds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rds.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplaneInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DiscoveryServiceStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplaneInsight
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DiscoveryServiceStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DiscoveryServiceStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsesSent", wireType)
			}
			m.ResponsesSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsesSent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsesAcknowledged", wireType)
			}
			m.ResponsesAcknowledged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsesAcknowledged |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponsesRejected", wireType)
			}
			m.ResponsesRejected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResponsesRejected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDataplaneInsight(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDataplaneInsight
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataplaneInsight(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataplaneInsight
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplaneInsight
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataplaneInsight
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthDataplaneInsight
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDataplaneInsight
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDataplaneInsight(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthDataplaneInsight
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDataplaneInsight = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataplaneInsight   = fmt.Errorf("proto: integer overflow")
)
