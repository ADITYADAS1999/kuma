// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mesh/v1alpha1/traffic_route.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// TrafficRoute defines routing rules for L4 traffic.
type TrafficRoute struct {
	// List of selectors to match dataplanes that are sources of traffic.
	Sources []*Selector `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// List of selectors to match services that are destinations of traffic.
	//
	// Notice the difference between sources and destinations.
	// While the source of traffic is always a dataplane within a mesh,
	// the destination is a service that could be either within or outside
	// of a mesh.
	Destinations []*Selector `protobuf:"bytes,2,rep,name=destinations,proto3" json:"destinations,omitempty"`
	// List of destinations with weights assigned to them.
	Conf                 []*TrafficRoute_WeightedDestination `protobuf:"bytes,3,rep,name=conf,proto3" json:"conf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *TrafficRoute) Reset()         { *m = TrafficRoute{} }
func (m *TrafficRoute) String() string { return proto.CompactTextString(m) }
func (*TrafficRoute) ProtoMessage()    {}
func (*TrafficRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_059271a05615c95f, []int{0}
}
func (m *TrafficRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficRoute.Merge(m, src)
}
func (m *TrafficRoute) XXX_Size() int {
	return m.Size()
}
func (m *TrafficRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficRoute.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficRoute proto.InternalMessageInfo

func (m *TrafficRoute) GetSources() []*Selector {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *TrafficRoute) GetDestinations() []*Selector {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *TrafficRoute) GetConf() []*TrafficRoute_WeightedDestination {
	if m != nil {
		return m.Conf
	}
	return nil
}

// WeightedDestination defines a destination with a weight assigned to it.
type TrafficRoute_WeightedDestination struct {
	// Weight assigned to that destination.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Selector to match individual endpoints that comprise that destination.
	//
	// Notice that an endpoint can be either inside or outside the mesh.
	// In the former case an endpoint corresponds to a dataplane,
	// in the latter case an endpoint is a black box.
	Destination          map[string]string `protobuf:"bytes,2,rep,name=destination,proto3" json:"destination,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TrafficRoute_WeightedDestination) Reset()         { *m = TrafficRoute_WeightedDestination{} }
func (m *TrafficRoute_WeightedDestination) String() string { return proto.CompactTextString(m) }
func (*TrafficRoute_WeightedDestination) ProtoMessage()    {}
func (*TrafficRoute_WeightedDestination) Descriptor() ([]byte, []int) {
	return fileDescriptor_059271a05615c95f, []int{0, 0}
}
func (m *TrafficRoute_WeightedDestination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficRoute_WeightedDestination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficRoute_WeightedDestination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficRoute_WeightedDestination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficRoute_WeightedDestination.Merge(m, src)
}
func (m *TrafficRoute_WeightedDestination) XXX_Size() int {
	return m.Size()
}
func (m *TrafficRoute_WeightedDestination) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficRoute_WeightedDestination.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficRoute_WeightedDestination proto.InternalMessageInfo

func (m *TrafficRoute_WeightedDestination) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *TrafficRoute_WeightedDestination) GetDestination() map[string]string {
	if m != nil {
		return m.Destination
	}
	return nil
}

func init() {
	proto.RegisterType((*TrafficRoute)(nil), "kuma.mesh.v1alpha1.TrafficRoute")
	proto.RegisterType((*TrafficRoute_WeightedDestination)(nil), "kuma.mesh.v1alpha1.TrafficRoute.WeightedDestination")
	proto.RegisterMapType((map[string]string)(nil), "kuma.mesh.v1alpha1.TrafficRoute.WeightedDestination.DestinationEntry")
}

func init() { proto.RegisterFile("mesh/v1alpha1/traffic_route.proto", fileDescriptor_059271a05615c95f) }

var fileDescriptor_059271a05615c95f = []byte{
	// 347 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0x4d, 0x2d, 0xce,
	0xd0, 0x2f, 0x33, 0x4c, 0xcc, 0x29, 0xc8, 0x48, 0x34, 0xd4, 0x2f, 0x29, 0x4a, 0x4c, 0x4b, 0xcb,
	0x4c, 0x8e, 0x2f, 0xca, 0x2f, 0x2d, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0xca,
	0x2e, 0xcd, 0x4d, 0xd4, 0x03, 0xa9, 0xd3, 0x83, 0xa9, 0x93, 0x92, 0x41, 0xd5, 0x56, 0x9c, 0x9a,
	0x93, 0x9a, 0x5c, 0x92, 0x5f, 0x04, 0xd1, 0x21, 0x25, 0x5e, 0x96, 0x98, 0x93, 0x99, 0x92, 0x58,
	0x92, 0xaa, 0x0f, 0x63, 0x40, 0x24, 0x94, 0x3e, 0x31, 0x73, 0xf1, 0x84, 0x40, 0xac, 0x08, 0x02,
	0xd9, 0x20, 0xe4, 0xc4, 0xc5, 0x5e, 0x9c, 0x5f, 0x5a, 0x94, 0x9c, 0x5a, 0x2c, 0xc1, 0xa8, 0xc0,
	0xac, 0xc1, 0x6d, 0x24, 0xa3, 0x87, 0x69, 0x9b, 0x5e, 0x30, 0xd4, 0x78, 0x27, 0xae, 0x5d, 0x2f,
	0x0f, 0x30, 0xb3, 0x4e, 0x62, 0x64, 0xe2, 0x60, 0x0c, 0x82, 0x69, 0x14, 0xf2, 0xe1, 0xe2, 0x49,
	0x49, 0x2d, 0x2e, 0xc9, 0xcc, 0x4b, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x96, 0x60, 0x22, 0xd1, 0x20,
	0x14, 0xdd, 0x42, 0x21, 0x5c, 0x2c, 0xc9, 0xf9, 0x79, 0x69, 0x12, 0xcc, 0x60, 0x53, 0x4c, 0xb0,
	0x99, 0x82, 0xec, 0x03, 0xbd, 0xf0, 0xd4, 0xcc, 0xf4, 0x8c, 0x92, 0xd4, 0x14, 0x17, 0x84, 0x21,
	0x28, 0xa6, 0x83, 0x4d, 0x93, 0xfa, 0xc9, 0xc8, 0x25, 0x8c, 0x45, 0xa5, 0x90, 0x22, 0x17, 0x5b,
	0x39, 0x58, 0x58, 0x82, 0x51, 0x81, 0x51, 0x83, 0xd7, 0x89, 0x13, 0xa4, 0x93, 0x45, 0x8b, 0x49,
	0x83, 0x21, 0x08, 0x2a, 0x21, 0x54, 0xcf, 0xc5, 0x8d, 0xe4, 0x40, 0xa8, 0xef, 0x5c, 0xc9, 0x71,
	0x97, 0x1e, 0x12, 0xdb, 0x35, 0xaf, 0xa4, 0xa8, 0xd2, 0x49, 0x0c, 0x64, 0x9d, 0xe0, 0x2c, 0x46,
	0x3e, 0x0e, 0x46, 0x25, 0x96, 0x22, 0x26, 0x01, 0x46, 0x2d, 0x30, 0x19, 0x84, 0x6c, 0xa3, 0x94,
	0x1d, 0x97, 0x00, 0xba, 0x46, 0x21, 0x01, 0x2e, 0xe6, 0xec, 0xd4, 0x4a, 0xb0, 0xa3, 0x39, 0x83,
	0x40, 0x4c, 0x21, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0xb0, 0x18, 0x84,
	0x63, 0xc5, 0x64, 0xc1, 0xe8, 0x24, 0x76, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x46, 0x71, 0xc0, 0x9c, 0x9b, 0xc4, 0x06, 0x4e, 0x13, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x74, 0x7c, 0xdd, 0x20, 0x83, 0x02, 0x00, 0x00,
}

func (m *TrafficRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficRoute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sources) > 0 {
		for _, msg := range m.Sources {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrafficRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Destinations) > 0 {
		for _, msg := range m.Destinations {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTrafficRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Conf) > 0 {
		for _, msg := range m.Conf {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTrafficRoute(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TrafficRoute_WeightedDestination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficRoute_WeightedDestination) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTrafficRoute(dAtA, i, uint64(m.Weight))
	}
	if len(m.Destination) > 0 {
		for k, _ := range m.Destination {
			dAtA[i] = 0x12
			i++
			v := m.Destination[k]
			mapSize := 1 + len(k) + sovTrafficRoute(uint64(len(k))) + 1 + len(v) + sovTrafficRoute(uint64(len(v)))
			i = encodeVarintTrafficRoute(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTrafficRoute(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTrafficRoute(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTrafficRoute(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TrafficRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sources) > 0 {
		for _, e := range m.Sources {
			l = e.Size()
			n += 1 + l + sovTrafficRoute(uint64(l))
		}
	}
	if len(m.Destinations) > 0 {
		for _, e := range m.Destinations {
			l = e.Size()
			n += 1 + l + sovTrafficRoute(uint64(l))
		}
	}
	if len(m.Conf) > 0 {
		for _, e := range m.Conf {
			l = e.Size()
			n += 1 + l + sovTrafficRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TrafficRoute_WeightedDestination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovTrafficRoute(uint64(m.Weight))
	}
	if len(m.Destination) > 0 {
		for k, v := range m.Destination {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTrafficRoute(uint64(len(k))) + 1 + len(v) + sovTrafficRoute(uint64(len(v)))
			n += mapEntrySize + 1 + sovTrafficRoute(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTrafficRoute(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTrafficRoute(x uint64) (n int) {
	return sovTrafficRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TrafficRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sources = append(m.Sources, &Selector{})
			if err := m.Sources[len(m.Sources)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destinations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destinations = append(m.Destinations, &Selector{})
			if err := m.Destinations[len(m.Destinations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conf", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conf = append(m.Conf, &TrafficRoute_WeightedDestination{})
			if err := m.Conf[len(m.Conf)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficRoute_WeightedDestination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrafficRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedDestination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedDestination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Destination == nil {
				m.Destination = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTrafficRoute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrafficRoute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTrafficRoute
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTrafficRoute
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTrafficRoute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTrafficRoute
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTrafficRoute
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTrafficRoute(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTrafficRoute
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Destination[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrafficRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrafficRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrafficRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrafficRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrafficRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrafficRoute
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTrafficRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTrafficRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTrafficRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTrafficRoute
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTrafficRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrafficRoute   = fmt.Errorf("proto: integer overflow")
)
